{"componentChunkName":"component---src-templates-lesson-template-js","path":"/navigation-exercise","result":{"data":{"markdownRemark":{"html":"<p>You can pass down parameters to the screen you navigate to as a second argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COLORS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnavigation<span class=\"token punctuation\">.</span><span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ColorPalette'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> paletteName<span class=\"token operator\">:</span> <span class=\"token string\">'Solarized'</span><span class=\"token punctuation\">,</span> colors<span class=\"token operator\">:</span> <span class=\"token constant\">COLORS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>`<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will make the paletteName and colors available to the ColorPalette via the <code class=\"language-text\">route</code> prop:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ColorPalette.js</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>paletteName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// logs out: Solarized</span></code></pre></div>\n<p>For this exercise:</p>\n<ol>\n<li>update the app so that the colors and name are being passed into the ColorPalette component, making it reusable. <a href=\"https://reactnavigation.org/docs/params\">Docs</a></li>\n<li>make sure the page title will be the name of the color palette instead of the name of the page. <a href=\"https://reactnavigation.org/docs/headers#using-params-in-the-title\">Docs</a></li>\n<li>add a Rainbow color scheme (hint: you create a <code class=\"language-text\">COLOR_PALETTES</code> array and use a <code class=\"language-text\">FlatList</code> to render them)</li>\n<li>update the Home page to display the first 3 colors of the color scheme as preview (stretch goal)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">RAINBOW</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> colorName<span class=\"token operator\">:</span> <span class=\"token string\">'Red'</span><span class=\"token punctuation\">,</span> hexCode<span class=\"token operator\">:</span> <span class=\"token string\">'#FF0000'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> colorName<span class=\"token operator\">:</span> <span class=\"token string\">'Orange'</span><span class=\"token punctuation\">,</span> hexCode<span class=\"token operator\">:</span> <span class=\"token string\">'#FF7F00'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> colorName<span class=\"token operator\">:</span> <span class=\"token string\">'Yellow'</span><span class=\"token punctuation\">,</span> hexCode<span class=\"token operator\">:</span> <span class=\"token string\">'#FFFF00'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> colorName<span class=\"token operator\">:</span> <span class=\"token string\">'Green'</span><span class=\"token punctuation\">,</span> hexCode<span class=\"token operator\">:</span> <span class=\"token string\">'#00FF00'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> colorName<span class=\"token operator\">:</span> <span class=\"token string\">'Violet'</span><span class=\"token punctuation\">,</span> hexCode<span class=\"token operator\">:</span> <span class=\"token string\">'#8B00FF'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"width:700px;margin:0 auto;margin-bottom:20px\">\n    <img alt=\"Completed palette preview exercise\" src=\"/react-native-v2/8d2d54effcf118c56c7fe9167ca5da84/palette-preview.gif\" width=\"700\">\n</div>\n<p>This is a guide for what the completed exercise should looks like. Notice that the navigation is different between iOS and Android? This is because both platforms leverage the native conventions for navigation. It is what the user is expecting and provides the best experience.</p>\n<h2 id=\"navigation-exercise-solution---part-1-\" style=\"position:relative;\"><a href=\"#navigation-exercise-solution---part-1-\" aria-label=\"navigation exercise solution   part 1  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation Exercise Solution - Part 1 👀</h2>\n<p><em>Update the app so that the colors and name are being passed into the ColorPalette component, making it reusable.</em></p>\n<p><a href=\"https://github.com/kadikraman/AwesomeProjectRN/commit/83a394603816a1fb49b0674c77984ba14d8cd012\">🔗 RN 83a3946</a></p>\n<p>For this we need to move the <code class=\"language-text\">COLORS</code> constant from <code class=\"language-text\">ColorPalette</code> to <code class=\"language-text\">Home</code> and pass in both the paletteName and colors as a second argument to <code class=\"language-text\">navigation.navigate</code>.</p>\n<p>Then in <code class=\"language-text\">ColorPalette</code>, use the <code class=\"language-text\">route</code> prop, specifically <code class=\"language-text\">route.params.paletteName</code> and <code class=\"language-text\">route.params.colors</code> to replace the previously hardcoded values.</p>\n<p>Finally, if you haven't done so already, add <code class=\"language-text\">backgroundColor: &#39;white&#39;</code> to the <code class=\"language-text\">container</code> style in <code class=\"language-text\">ColorPalette</code>. React Navigation adds a greyish background to pages by default.</p>\n<h2 id=\"navigation-exercise-solution---part-2-\" style=\"position:relative;\"><a href=\"#navigation-exercise-solution---part-2-\" aria-label=\"navigation exercise solution   part 2  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation Exercise Solution - Part 2 👀</h2>\n<p><em>Make sure the page title will be the name of the color palette instead of the name of the page.</em></p>\n<p><a href=\"https://github.com/kadikraman/AwesomeProjectRN/commit/921be406d9d22ef2dfa6def883b11059ba65d2f1\">🔗 RN 921be40</a></p>\n<p>As in the <a href=\"https://reactnavigation.org/docs/headers#using-params-in-the-title\">docs</a>, open <code class=\"language-text\">App.js</code> and add an extra prop to the ColorPalette screen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> route <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>paletteName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also delete the <code class=\"language-text\">ListHeaderComponent</code> prop from <code class=\"language-text\">ColorPalette</code>, since the palette name is already displayed as the page title.</p>\n<h2 id=\"navigation-exercise-solution---part-3-\" style=\"position:relative;\"><a href=\"#navigation-exercise-solution---part-3-\" aria-label=\"navigation exercise solution   part 3  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation Exercise Solution - Part 3 👀</h2>\n<p><em>Add a Rainbow color scheme.</em></p>\n<p><a href=\"https://github.com/kadikraman/AwesomeProjectRN/commit/d4809bea3de506a4571f557287d5a11078ffa394\">🔗 RN d4809be</a></p>\n<p>Fist off we'll want to create a new array for <code class=\"language-text\">COLOR_PALETTES</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// screens/Home.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">COLOR_PALETTES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> paletteName<span class=\"token operator\">:</span> <span class=\"token string\">'Solarized'</span><span class=\"token punctuation\">,</span> colors<span class=\"token operator\">:</span> <span class=\"token constant\">SOLARIZED</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> paletteName<span class=\"token operator\">:</span> <span class=\"token string\">'Rainbow'</span><span class=\"token punctuation\">,</span> colors<span class=\"token operator\">:</span> <span class=\"token constant\">RAINBOW</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next up we can replace our existing code in the render with a single FlatList:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// screens/Home.js</span>\n\n<span class=\"token operator\">&lt;</span>FlatList\n  data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">COLOR_PALETTES</span><span class=\"token punctuation\">}</span>\n  keyExtractor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>paletteName<span class=\"token punctuation\">}</span>\n  renderItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>TouchableOpacity onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> navigation<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ColorPalette'</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>paletteName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Make sure you've replaced the hardcoded values in renderItem with the dynamic ones we're done!</p>\n<h2 id=\"navigation-exercise-solution---part-4-\" style=\"position:relative;\"><a href=\"#navigation-exercise-solution---part-4-\" aria-label=\"navigation exercise solution   part 4  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation Exercise Solution - Part 4 👀</h2>\n<p>Update the Home page to display the first 3 colors of the color scheme as preview</p>\n<p><a href=\"https://github.com/kadikraman/AwesomeProjectRN/commit/6cfd163ea3524febbd34e7f984bbd84b1bd58cd7\">🔗 RN 6cfd163</a></p>\n<p>Create a new component in out components directory and let's call it <code class=\"language-text\">PalettePreview</code>. Before you start adding styling and colors to it, make sure the existing functionality remains unbroken.</p>\n<p>In the Home component, update the <code class=\"language-text\">renderItem</code> to use <code class=\"language-text\">PalettePreview</code> instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// screens/Home.js</span>\n\n<span class=\"token operator\">&lt;</span>PalettePreview\n  onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> navigation<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ColorPalette'</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  palette<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>And in PalettePreview, copy the code that used to be in renderItem and use the passed in props to display the component name and handle onPress\"</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// components/PalettePreview.js</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TouchableOpacity<span class=\"token punctuation\">,</span> Text<span class=\"token punctuation\">,</span> View <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PalettePreview</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> palette<span class=\"token punctuation\">,</span> onPress <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>TouchableOpacity onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onPress<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>palette<span class=\"token punctuation\">.</span>paletteName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PalettePreview<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, add a FlatList under the <code class=\"language-text\">&lt;Text&gt;</code> in <code class=\"language-text\">PalettePreview</code> to render the three preview colors. Technically you could get away with not using <code class=\"language-text\">FlatList</code> here, since we know we'll only ever have 3 items to display, but using FlatList it's a good habit to get into and there's no harm, so I'd recommend always using a <code class=\"language-text\">FlatList</code> for 3+ items.</p>\n<p>Note, you can use <code class=\"language-text\">palette.colors.slice(0, 3)</code> to get the first 3 items of your color array (never splice, as it mutates the array).</p>\n<p>You'll have to pass in an array of styles to the little color square in order to set the backgorund dynamically, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// components/PalettePreview.js</span>\n\nrenderItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>styles<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>hexCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"path":"/navigation-exercise","title":"Navigation Exercise 📝","order":17}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":0,"path":"/intro","title":"Welcome"}}},{"node":{"frontmatter":{"order":1,"path":"/react-native","title":"About React Native"}}},{"node":{"frontmatter":{"order":2,"path":"/the-expo-debate","title":"Should you use Expo or plain React Native?"}}},{"node":{"frontmatter":{"order":3,"path":"/setup-expo","title":"[Expo] Getting started with Expo"}}},{"node":{"frontmatter":{"order":4,"path":"/setup-rn","title":"[RN] Getting started with plain React Native"}}},{"node":{"frontmatter":{"order":5,"path":"/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":6,"path":"/intro-to-react","title":"Basic React Native components"}}},{"node":{"frontmatter":{"order":7,"path":"/safe-area","title":"Safe Area"}}},{"node":{"frontmatter":{"order":8,"path":"/styling","title":"Styling"}}},{"node":{"frontmatter":{"order":9,"path":"/styling-exercise","title":"Styling Exercise 📝"}}},{"node":{"frontmatter":{"order":10,"path":"/components","title":"Components"}}},{"node":{"frontmatter":{"order":11,"path":"/lists","title":"Lists"}}},{"node":{"frontmatter":{"order":12,"path":"/lists-exercise","title":"Lists Exercise 📝"}}},{"node":{"frontmatter":{"order":13,"path":"/navigation-intro","title":"Navigation Into"}}},{"node":{"frontmatter":{"order":14,"path":"/navigation-rn","title":"[RN] Adding navigation with plain React Native"}}},{"node":{"frontmatter":{"order":15,"path":"/navigation-expo","title":"[Expo] Adding navigation with Expo"}}},{"node":{"frontmatter":{"order":16,"path":"/adding-navigation","title":"Adding Navigation"}}},{"node":{"frontmatter":{"order":17,"path":"/navigation-exercise","title":"Navigation Exercise 📝"}}},{"node":{"frontmatter":{"order":18,"path":"/react-hooks","title":"useState, useCallback, useEffect"}}},{"node":{"frontmatter":{"order":19,"path":"/network-requests-exercise","title":"Network Requests Exercise 📝"}}},{"node":{"frontmatter":{"order":20,"path":"/forms","title":"Overview of Forms in React Native"}}},{"node":{"frontmatter":{"order":21,"path":"/forms-exercise","title":"Form exercise 📝"}}},{"node":{"frontmatter":{"order":22,"path":"/code-style","title":"Adding a linter"}}},{"node":{"frontmatter":{"order":23,"path":"/ejecting-from-expo","title":"[Expo] Ejecting from Expo"}}},{"node":{"frontmatter":{"order":24,"path":"/native-modules","title":"[RN] Adding native modules"}}},{"node":{"frontmatter":{"order":25,"path":"/platform-specific-code","title":"Platform Specific Code"}}},{"node":{"frontmatter":{"order":26,"path":"/security","title":"Security"}}}]}},"pageContext":{}}}